name: Deploy Lambda with Terraform

on:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: ./terraform

jobs:
  lambda-terraform-deploy:
    name: Deploy Lambda and Infrastructure
    runs-on: ubuntu-latest

    env:
        AWS_S3_NAME: ${{ secrets.AWS_S3_NAME }}
        DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Lambda Dependencies
      run: |
        cd ../lambda  # Navega para o diretório da Lambda
        pip install -r requirements.txt -t .  # Instala dependências no diretório local
        zip -r ../video_processor.zip .  # Cria o pacote Lambda
        cd ../terraform  # Retorna ao diretório Terraform

    - name: Upload Lambda Package to S3
      run: aws s3 cp ../video_processor.zip s3://${{ secrets.AWS_S3_NAME }}/

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.6"

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" -var "JWT_SECRET=${{ secrets.JWT_SECRET }}" -var "lambda_s3_key=video_processor.zip"

    - name: Terraform Apply
      run: terraform apply -auto-approve -var "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" -var "JWT_SECRET=${{ secrets.JWT_SECRET }}" -var "lambda_s3_key=video_processor.zip"
