name: Deploy Lambda with Terraform

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

defaults:
  run:
    working-directory: ./terraform

jobs:
  lambda-terraform-deploy:
    name: Deploy Lambda and Infrastructure
    runs-on: ubuntu-latest

    env:
      AWS_S3_NAME: ${{ secrets.AWS_S3_NAME }}
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Instalar dependências de produção e criar o pacote Lambda
    - name: Install Lambda Dependencies and Package
      run: |
        ls -l   # Lista os arquivos antes da instalação

        if [ -f ../requirements.txt ]; then
          pip install -r ../requirements.txt -t ../app  # Instala dependências de produção
          cd ../app
          zip -r ../video_processor.zip .  # Cria o pacote ZIP no diretório raiz
          ls -l  # Lista os arquivos depois para verificar se o ZIP foi criado corretamente
          cd ..  # Retorna ao diretório raiz
        else
          echo "requirements.txt não encontrado no diretório raiz"
          exit 1
        fi

    # Verificar se o pacote Lambda foi criado
    - name: Verify Lambda Package
      run: |
        ls -l  # Lista os arquivos do diretório raiz
        if [ ! -f ../app/video_processor.zip ]; then
          echo "Pacote video_processor.zip não encontrado!"
          exit 1
        fi

    # Instalar dependências de teste
    - name: Install Test Dependencies
      run: |
        if [ -f ../requirements-test.txt ]; then
          pip install -r ../requirements-test.txt  # Instala dependências de teste
        else
          echo "requirements-test.txt não encontrado"
          exit 1
        fi

     # Executar testes
    - name: Run Tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/..
        pytest --import-mode=importlib ../tests/

    # Instalar Terraform
    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y unzip curl
        curl -o terraform.zip "https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip"
        unzip -o terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version

    # Fazer upload do pacote Lambda para o S3
    - name: Upload Lambda Package to S3
      run: |
        aws s3 cp ../app/video_processor.zip s3://${{ secrets.AWS_S3_NAME }}/

    # Inicializar Terraform
    - name: Initialize Terraform
      run: terraform init

    # Validar configuração do Terraform
    - name: Validate Terraform Configuration
      run: terraform validate

    # Planejar a execução do Terraform
    - name: Plan Terraform Deployment
      run: terraform plan -out=tfplan

    # Aplicar a configuração do Terraform
    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve

    # Reutilizar política IAM existente
    - name: Attach Existing IAM Policy
      run: terraform apply -auto-approve